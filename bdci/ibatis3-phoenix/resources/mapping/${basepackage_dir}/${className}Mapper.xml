<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>

<#macro namespace>${className}.</#macro>

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="${basepackage}.mapper.${className}Mapper">

	<resultMap id="${classNameFirstLower}" type="${basepackage}.entity.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		<#list table.columns as column>
        	${column.sqlName}<#if column_has_next>,</#if>
        </#list>
	    ]]>
	</sql>
     
    <!-- 用phoenix的insert与update其实是同一个语句，但是为了避免update的时候吧未赋值的数据也给覆盖掉，所以分开两个sql -->
	<insert id="insert" parameterType="${basepackage}.entity.${className}">
        UPSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName}<#if column_has_next>,</#if>
        </#list>
        ) VALUES 
        (
        <#list table.columns as column>
        	<#if column.columnNameFirstLower == "insertTime">
        		now()
        	<#else>
                <@mapperEl '${column.columnNameFirstLower}'/>
        	</#if>
        	<#if column_has_next>,</#if>
        </#list>
        )
	</insert>
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="update" parameterType="${basepackage}.entity.${className}">
        UPSERT INTO ${table.sqlName} (
        <trim suffix="" suffixOverrides=",">
        <#list table.columns as column>
        	<if test="${column.columnNameFirstLower} != null">
        		${column.sqlName},
        	</if>
        </#list>
        </trim>
        ) VALUES (
        <trim suffix="" suffixOverrides=",">
        <#list table.columns as column>
        	<if test="${column.columnNameFirstLower} != null">
        		<@mapperEl '${column.columnNameFirstLower}'/>,
        	</if>
        </#list>
        </trim>
        )
	</insert>
    

    
    <select id="getByPk" parameterType="map" resultMap="${classNameFirstLower}">
		SELECT <include refid="columns" />
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl '${column.columnNameFirstLower}'/> <#if column_has_next> and </#if>
		        </#list>    
	</select>
	
	<select id="getByRange" parameterType="map" resultMap="${classNameFirstLower}">
		SELECT <include refid="columns" />
		    FROM ${table.sqlName} 
	        LIMIT  ${r"#{"}length} OFFSET ${r"#{"}start}
	</select>
	
	
    <select id="find" parameterType="${basepackage}.entity.${className}" resultMap="${classNameFirstLower}">
		SELECT <include refid="columns" />
		    FROM ${table.sqlName} 
	        <include refid="queryCondition"/> 
	</select>
	
	
	<sql id="queryCondition">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<trim prefix="where" prefixOverrides="AND|OR">				
	       <#list table.columns as column>
	       <if test="${column.columnNameFirstLower} != null">
				AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower/>
			</if>
	       </#list>	
		</trim>
	</sql>
		
    <select id="count" parameterType="${basepackage}.entity.${className}" resultType="long">
        SELECT count(*) FROM ${table.sqlName} 
		<include refid="queryCondition"/>    
    </select>
    
    <select id="countAll"  resultType="long">
        SELECT count(*) FROM ${table.sqlName}   
    </select>
    
	
</mapper>

